{"version":3,"sources":["components/GraphInput.jsx","components/GraphView.jsx","App.js","reportWebVitals.js","index.js"],"names":["GraphInput","_ref","edges","setEdges","React","createElement","rows","value","onChange","e","target","placeholder","style","width","height","GraphView","elements","CytoscapeComponent","layout","name","App","useState","setElements","id","onClick","updateGraph","parsedEdges","JSON","parse","newElements","nodes","Set","forEach","source","add","push","data","concat","index","nodeCount","size","centerX","centerY","radius","node","angle","Math","PI","x","cos","y","sin","label","position","error","alert","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"sNAoBeA,MAlBIC,IAA0B,IAAzB,MAAEC,EAAK,SAAEC,GAAUF,EAKrC,OACEG,IAAAC,cAAA,WACED,IAAAC,cAAA,YACEC,KAAK,IACLC,MAAOL,EACPM,SATgBC,IACpBN,EAASM,EAAEC,OAAOH,QASdI,YAAY,kCACZC,MAAO,CAAEC,MAAO,QAASC,OAAQ,a,OCD1BC,MAVGd,IAAmB,IAAlB,SAAEe,GAAUf,EAC7B,OACEG,IAAAC,cAACY,IAAkB,CACjBD,SAAUA,EACVJ,MAAO,CAAEC,MAAO,SAAUC,OAAQ,SAClCI,OAAQ,CAAEC,KAAM,W,MCwDPC,MA5DHA,KACR,MAAOlB,EAAOC,GAAYkB,mBAAS,qBAC5BL,EAAUM,GAAeD,mBAAS,IAwCzC,OACIjB,IAAAC,cAAA,OAAKkB,GAAG,aACJnB,IAAAC,cAAA,MAAIkB,GAAG,sBAAqB,oBAC5BnB,IAAAC,cAAA,OAAKkB,GAAG,iBACJnB,IAAAC,cAACL,EAAU,CAACE,MAAOA,EAAOC,SAAUA,IACpCC,IAAAC,cAAA,UAAQmB,QA3CAC,KAChB,IACI,MAAMC,EAAcC,KAAKC,MAAM1B,GACzB2B,EAAc,GACdC,EAAQ,IAAIC,IAClBL,EAAYM,QAAQ/B,IAAuB,IAArBgC,EAAQvB,GAAOT,EACjC6B,EAAMI,IAAID,GACVH,EAAMI,IAAIxB,GACVmB,EAAYM,KAAK,CACbC,KAAM,CAAEb,GAAG,GAADc,OAAKJ,EAAM,KAAAI,OAAI3B,GAAUuB,SAAQvB,UAC3CE,MAAO,CACH,aAAc,aAI1B,IAAI0B,EAAQ,EACZ,MAAMC,EAAYT,EAAMU,KAClBC,EAAU,IACVC,EAAU,IACVC,EAAS,IACfb,EAAME,QAASY,IACX,MAAMC,EAASP,EAAQC,EAAa,EAAIO,KAAKC,GACvCC,EAAIP,EAAUE,EAASG,KAAKG,IAAIJ,GAChCK,EAAIR,EAAUC,EAASG,KAAKK,IAAIN,GACtChB,EAAYM,KAAK,CACbC,KAAM,CAAEb,GAAIqB,EAAMQ,MAAM,QAADf,OAAUO,IACjCS,SAAU,CAAEL,IAAGE,KACftC,MAAO,CACH,mBAAoB,YAG5B0B,MAEJhB,EAAYO,GACd,MAAOyB,GACLC,MAAM,+CAQ4BC,MAAM,WAAU,mBAG9CpD,IAAAC,cAAA,UAAQmD,MAAM,WAAU,OACxBpD,IAAAC,cAAA,UAAQmD,MAAM,WAAU,OACxBpD,IAAAC,cAAA,UAAQmD,MAAM,WAAU,qBAE5BpD,IAAAC,cAAA,OAAKkB,GAAG,iBACJnB,IAAAC,cAACU,EAAS,CAACC,SAAUA,OC/CtByC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAK3D,IAAkD,IAAjD,OAAE4D,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAAShE,EACpE4D,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,MCDDQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHlE,IAAAC,cAACD,IAAMmE,WAAU,KACfnE,IAAAC,cAACe,EAAG,QAORqC,K","file":"static/js/main.6665ef88.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst GraphInput = ({ edges, setEdges }) => {\r\n  const handleChange = (e) => {\r\n    setEdges(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <textarea\r\n        rows=\"5\"\r\n        value={edges}\r\n        onChange={handleChange}\r\n        placeholder=\"Enter edges as [[a, b], [b, c]]\"\r\n        style={{ width: '150px', height: '430px' }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphInput;\r\n","import React from 'react';\r\nimport CytoscapeComponent from 'react-cytoscapejs';\r\n\r\nconst GraphView = ({ elements }) => {\r\n  return (\r\n    <CytoscapeComponent\r\n      elements={elements}\r\n      style={{ width: '1300px', height: '600px' }}\r\n      layout={{ name: 'grid' }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GraphView;\r\n","import React, { useState } from \"react\";\nimport GraphInput from \"./components/GraphInput\";\nimport GraphView from \"./components/GraphView\";\nimport \"./App.css\";\nconst App = () => {\n    const [edges, setEdges] = useState(\"[[1, 2], [2, 3]]\");\n    const [elements, setElements] = useState([]);\n\n    const updateGraph = () => {\n        try {\n            const parsedEdges = JSON.parse(edges);\n            const newElements = [];\n            const nodes = new Set();\n            parsedEdges.forEach(([source, target]) => {\n                nodes.add(source);\n                nodes.add(target);\n                newElements.push({\n                    data: { id: `${source}-${target}`, source, target },\n                    style: {\n                        \"line-color\": \"black\",\n                    },\n                });\n            });\n            let index = 0;\n            const nodeCount = nodes.size;\n            const centerX = 700;\n            const centerY = 300;\n            const radius = 100;\n            nodes.forEach((node) => {\n                const angle = (index / nodeCount) * 2 * Math.PI;\n                const x = centerX + radius * Math.cos(angle);\n                const y = centerY + radius * Math.sin(angle);\n                newElements.push({\n                    data: { id: node, label: `Node ${node}` },\n                    position: { x, y },\n                    style: {\n                        \"background-color\": \"purple\",\n                    },\n                });\n                index++;\n            });\n            setElements(newElements);\n        } catch (error) {\n            alert(\"Invalid edge format! Use [[a, b], [b, c]]\");\n        }\n    };\n    return (\n        <div id=\"container\">\n            <h1 id=\"Heading-of-project\">Graph Visualizer</h1>\n            <div id=\"Input-section\">\n                <GraphInput edges={edges} setEdges={setEdges} />\n                <button onClick={updateGraph} class=\"buttons\">\n                    Visualize Graph\n                </button>\n                <button class=\"buttons\">BFS</button>\n                <button class=\"buttons\">DFS</button>\n                <button class=\"buttons\">Topological Sort</button>\n            </div>\n            <div id=\"Graph-section\">\n                <GraphView elements={elements} />\n            </div>\n        </div>\n    );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}